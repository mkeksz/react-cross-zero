{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","step","current","winner","status","filter","square","moves","map","move","desc","key","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"uRAIA,SAASA,EAAOC,GACd,OACE,4BAAQC,UAAU,SAASC,QAASF,EAAME,SACvCF,EAAMG,O,IAKPC,E,2KACSC,GAAI,IAAD,OACd,OAAO,kBAACN,EAAD,CAAQI,MAAOG,KAAKN,MAAMO,QAAQF,GAAIH,QAAS,kBAAM,EAAKF,MAAME,QAAQG,Q,+BAI/E,OACE,6BACE,yBAAKJ,UAAU,aACZK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAErB,yBAAKP,UAAU,aACZK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAErB,yBAAKP,UAAU,aACZK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,S,GArBTC,IAAMC,WA4BpBC,E,kDACJ,WAAYX,GAAQ,IAAD,8BACjB,cAAMA,IACDY,MAAQ,CACXC,QAAS,CAAC,CAAEN,QAASO,MAAM,GAAGC,KAAK,QACnCC,WAAY,EACZC,SAAS,GALM,E,wDASPZ,GAEV,IAAMQ,EAAUP,KAAKM,MAAMC,QAAQK,MAAM,EAAGZ,KAAKM,MAAMI,WAAa,GAE9DT,EADUM,EAAQA,EAAQM,OAAS,GACjBZ,QAAQW,QAC5BE,EAAgBb,IAAYA,EAAQF,KACxCE,EAAQF,GAAKC,KAAKM,MAAMK,QAAU,IAAM,IAExCX,KAAKe,SAAS,CACZR,QAASA,EAAQS,OAAO,CAAC,CAAEf,aAC3BS,WAAYH,EAAQM,OACpBF,SAAUX,KAAKM,MAAMK,a,6BAIlBM,GACLjB,KAAKe,SAAS,CAAEL,WAAYO,EAAMN,QAASM,EAAO,IAAM,M,+BAGhD,IAAD,OACDV,EAAUP,KAAKM,MAAMC,QACrBW,EAAUX,EAAQP,KAAKM,MAAMI,YAC7BS,EAASL,EAAgBI,EAAQjB,SAEnCmB,EAASD,EAAS,8CAAaA,EAAS,iBAAmBnB,KAAKM,MAAMK,QAAU,IAAM,KAE3D,IADPO,EAAQjB,QAAQoB,QAAO,SAACC,GAAD,OAAuB,OAAXA,KACvCT,QAAiBM,IAAQC,EAAS,kCAEtD,IAAMG,EAAQhB,EAAQiB,KAAI,SAACP,EAAMQ,GAC/B,IAAMC,EAAOD,EAAO,+EAAqBA,EAAO,uEAChD,OACE,wBAAIE,IAAKF,GACP,4BAAQ7B,QAAS,kBAAM,EAAKgC,OAAOH,KAAQC,OAKjD,OACE,yBAAK/B,UAAU,QACb,yBAAKA,UAAU,cACb,kBAACG,EAAD,CAAOG,QAASiB,EAAQjB,QAASL,QAAS,SAACG,GAAD,OAAO,EAAK8B,YAAY9B,OAEpE,yBAAKJ,UAAU,aACb,6BAAMyB,GACN,4BAAKG,S,GAtDIpB,IAAMC,WA6DzB,SAASU,EAAgBb,GAWvB,IAVA,IAAM6B,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEA/B,EAAI,EAAGA,EAAI+B,EAAMjB,OAAQd,IAAK,CAAC,IAAD,cACnB+B,EAAM/B,GADa,GAC9BgC,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAIhC,EAAQ8B,IAAM9B,EAAQ8B,KAAO9B,EAAQ+B,IAAM/B,EAAQ8B,KAAO9B,EAAQgC,GACpE,OAAOhC,EAAQ8B,GAGnB,OAAO,KAKTG,IAASC,OAAO,kBAAC9B,EAAD,MAAU+B,SAASC,eAAe,W","file":"static/js/main.ab2f2475.chunk.js","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\n\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  )\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return <Square value={this.props.squares[i]} onClick={() => this.props.onClick(i)} />\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    )\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      history: [{ squares: Array(9).fill(null) }],\n      stepNumber: 0,\n      xIsNext: true,\n    }\n  }\n\n  handleClick(i) {\n    // делаем копию для иммутабельности react\n    const history = this.state.history.slice(0, this.state.stepNumber + 1)\n    const current = history[history.length - 1]\n    const squares = current.squares.slice()\n    if (calculateWinner(squares) || squares[i]) return\n    squares[i] = this.state.xIsNext ? 'X' : 'O'\n    // В отличие от метода массива push(), с которым вы должно быть знакомы, метод concat() не изменяет оригинальный массив, поэтому мы предпочтём его.\n    this.setState({\n      history: history.concat([{ squares }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    })\n  }\n\n  jumpTo(step) {\n    this.setState({ stepNumber: step, xIsNext: step % 2 === 0 })\n  }\n\n  render() {\n    const history = this.state.history\n    const current = history[this.state.stepNumber]\n    const winner = calculateWinner(current.squares)\n\n    let status = winner ? 'Выиграл ' + winner : 'Next player: ' + (this.state.xIsNext ? 'X' : 'O')\n    const currentFiltered = current.squares.filter((square) => square === null)\n    if (currentFiltered.length === 0 && !winner) status = 'Ничья'\n\n    const moves = history.map((step, move) => {\n      const desc = move ? 'Перейти к ходу #' + move : 'К началу игры'\n      return (\n        <li key={move}>\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\n        </li>\n      )\n    })\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board squares={current.squares} onClick={(i) => this.handleClick(i)} />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ]\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i]\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a]\n    }\n  }\n  return null\n}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById('root'))\n"],"sourceRoot":""}